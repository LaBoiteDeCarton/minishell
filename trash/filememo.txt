
Pipeline:
[time [-p]] [!] command1 [ | or |& command2 ] …
The output of each command in the pipeline is connected via a pipe to the input of the next command. 
That is, each command reads the previous command’s output. 
This connection is performed before any redirections specified by the command. !!!!!!

en cas de && et || les fichier s'ouvrent a gauche mais pas a droite. Alors que dans le pipe, d'abord tous les fichiers s'ouvrent...
bash-3.2$ < file1 grep a && < nexistepas cat
salut
sdsds
bash: nexistepas: No such file or directory
bash-3.2$ < file1 grep s || < nexistepas cat
salut
sdsds

< file1 grep a > file2 | sleep 5 | < nexistepas cat
bash: nexistepas: No such file or directory
mais l'execution se fait a gauche après que les fichiers ont tenté detre ouvert, puis sleep, ...

< hgjgh cat | hjk | < hkhkjhk cat
bash: hgjgh: No such file or directory
bash: hkhkjhk: No such file or directory
bash: hjk: command not found

ls | zkl | < hjjhk cat
bash: zkl: command not found
bash: hjjhk: No such file or directory

< hgjgh cat | hjk | kjh | < hkhkjhk cat
bash: hgjgh: No such file or directory
bash: hjk: command not found
bash: hkhkjhk: No such file or directory
bash: kjh: command not found

 < file1 cat | hjk | kjh | < hkhkjhk cat
bash: hjk: command not found
bash: kjh: command not found
bash: hkhkjhk: No such file or directory

Cet exemple en dit long (enfaite non)

bash-3.2$ echo toto | exit | echo tata
tata
bash-3.2$ 
EXIT uniquement dans le fork. good news

bash-3.2$ echo toto > toto | cat | grep a
bash-3.2$

bash-3.2$ cat | grep a
>
>
attende d'entrée standart, stopé avec C^D 

 cat | grep a
salut
salut
toto
comment
tu vas
tu vas
bash-3.2$ 
ici grep affiche directement. En gros, dès que ça rentre en stdin, ça sort directement. l'attente se faite en continue sur le pipe ouvert. Pipe fermé avec Control D ou Control C
Control D, valeur de sortie 0, Control C valeur de sortie 130

kjk |
> 

bash-3.2$ < | >
bash: syntax error near unexpected token `|'
bash-3.2$ echo toto | >
bash: syntax error near unexpected token `newline'

??WTF?? :
bash-3.2$ cat | bash
hello
bash: line 1: hello: command not found
echo toto
toto
exit
echo toto
bash-3.2$ 

bash-3.2$ cd dossier/ && ls
fileindossier
(le && ne crée pas un nouveau fork)

bash-3.2$ cd dossier/ | ls
dossier		file1		fileres2	kjh
Le pipe crée un fork, mais les redirections se font en interne du fork

bash-3.2$ cd dossier/ && ls | ls
fileindossier
bash-3.2$ (cd dossier/ && ls) | ls
dossier		file1		fileres2	kjh

bash-3.2$ (cd dossier/ && ls > newfile) | ls
dossier		file1		fileres2	kjh		strlen2.c	strlen4.o	strlen6.c	strlentext2	strlentext6
exemple.c	file2		haha		strlen.c	strlen2.o	strlen5.c	strlen6.o	strlentext4	toto
exemple.o	fileres		hihi		strlen.o	strlen4.c	strlen5.o	strlentext	strlentext5	zzz
bash-3.2$ cd dossier/
bash-3.2$ cat newfile 
fileindossier
newfile

fork a gauche on se deplace dans le dossier on crée le fichier, on ls dans le fichier. fork a droite on est toujours
dans le dossier courant donc ls donne la liste du dossier parent.



OK
conclusion, le souci vient du fait que les built-in ne sont pas implementé par le programme (en grosse partie)
Si on refait "echo" par exemple, on effectue l'execution de echo en faisant un write sur STDOUT actuel en faisant les modifications sur la string 
qu'il faut faire etc. MAIS, a la differences d'autres built-in, je ne sors pas du programme, alors que les built-in non codés, on passe
par un execve d'un programme du coup on est obligé de faire un fork.
La question que je me pose du coup, c'est si les built-in ne sont pas au final des programmes qu'on doit créer a part. Du genre créer un main etc
et faire sortir le programme. Mais dans ce cas la je ne vois pas comment gerer le built-in "cd". Car si on dois executer dans tous les cas
les built-in dans un fork a part, la variable d'environnement ne change pas pour le père. (et il ne dois pas changer d'ailleurs entre les pipes, mais cd dois
foncitonner entre les && car pas de "fo)


bash-3.2$ echo $ARG| cat -e
$
bash-3.2$ ARG=hello | echo $ARG | cat -e
$
bash-3.2$ export ARG=hello | echo $ARG | cat -e


bash-3.2$ jhjhk jhkjhk; echo $?
bash: jhjhk: command not found
127
bash-3.2$ <kjhhkjhkhkjhkjh echo test; echo $?
bash: kjhhkjhkhkjhkjh: No such file or directory
1
1
1
bash-3.2$ &&&
bash: syntax error near unexpected token `&&'
bash-3.2$ echo $?
258

bash-3.2$ jhkhkj | <file2 kjkjlkj | <file3 kjlkjl
bash: jhkhkj: command not found
bash: file2: No such file or directory
bash: file3: No such file or directory
bash-3.2$ jhkhkj | <file2 kjkjlkj | <file3 kjlkjl
bash: file2: No such file or directory
bash: jhkhkj: command not found
bash: file3: No such file or directory

MEME COMMANDE comportement different. L'ordre depend du premier qui arrive a afficher l'erreur. Vu que le fork est effectué en interne, parfois
l'erreur file 2 passe avant le comand not found


The status stored by waitpid() encodes both the reason that the child process was terminated and
 the exit code. The reason is stored in the least-significant byte (obtained by status & 0xff), 
 and the exit code is stored in the next byte (masked by status & 0xff00 and extracted by WEXITSTATUS()).
  When the process terminates normally, the reason is 0 and so WEXITSTATUS is just equivalent to shifting 
  by 8 (or dividing by 256). However, if the process is killed by a signal (such as SIGSEGV), there is no 
  exit code, and you have to use WTERMSIG to extract the signal number from the reason byte.


bash-3.2$ /file/kjlkj/jkljl
bash: /file/kjlkj/jkljl: No such file or directory

bash-3.2$ ARG=4
bash-3.2$ echo $ARG
4
bash-3.2$ ARG2="ici $ARG"
bash-3.2$ echo $ARG2
ici 4
bash-3.2$ ARG=5
bash-3.2$ echo $ARG2
ici 4

bash-3.2$ echo hkjhkjh"hjk"
hkjhkjhhjk

bash-3.2$ l"s"
Makefile        abs             file1           fileres         hello           kjhkjh          minishell       srcs            trash
abk             file 

bash-3.2$ <file FARG=memo >$FARG
crée un fichier memo

bash-3.2$ <<$TYUZ TYUZ=tifu >$TYUZ | echo test
> jlkjfl
> memo
> tifu
> $TYUZ
test
bash-3.2$ <<"$TYUZ" TYUZ=tifu >$TYUZ | echo test
> lkejlkj
> tifu
> "$TYUZ"
> $TYUZ
test
bash-3.2$ <<TY"UZ" TYUZ=tifu >$TYUZ | echo test
> kjklj
> TY
> UZ
> TYUZ
test
bash-3.2$ <<TY"UZ" TYUZ=tifu >$TYUZ | echo test
> TY"UZ"
> TYUZ

EXPAND avec Heredoc comme si c'etait un squote
VAR=memo
bash-3.2$ <$VAR VAR=memo ;echo $VAR
memo
bash-3.2$ <$VAR VAR=jkljlk ;echo $VAR
bash: jkljlk: No such file or directory

bash-3.2$ VAR=BLABLA
bash-3.2$ $VAR="khjkjhjkh"
bash: BLABLA=khjkjhjkh: command not found

bash-3.2$ VAR=BOOM
bash-3.2$ BLABLA=$VAR
bash-3.2$ echo $BLABLA
BOOM
bash-3.2$ BLABLA="coucou $VAR"
bash-3.2$ echo $BLABLA
coucou BOOM
bash-3.2$ echo $VAR
jkl
bash-3.2$ export VAR=tutut
bash-3.2$ echo $VAR
tutut

bash-3.2$ VAR=1 BIGVAR=2 OTHERVAR=3 ; echo $VAR $BIGVAR $OTHERVAR
1 2 3
bash-3.2$ VAR=4 BIGVAR=5 OTHERVAR=6 echo test ; echo $VAR $BIGVAR $OTHERVAR
test
1 2 3
bash-3.2$ VAR=1 BIGVAR=$VAR OTHERVAR=3 ; echo $VAR $BIGVAR $OTHERVAR
1 1 3
bash-3.2$ VAR=$NOTEXISTYET NOTEXISTYET=5 BIGVAR=$VAR OTHERVAR=3 ; echo $VAR $BIGVAR $OTHERVAR
3
bash-3.2$ echo '$'arg
$arg
bash-3.2$ echo "$"arg
$arg
bash-3.2$ echo$'arg'
bash: echoarg: command not found

https://discussions.apple.com/thread/3693628 wow fast typing...that why cat doesn't work after pipe

bash-3.2$ export tatata ; env | grep tatata
bash-3.2$ 
bash-3.2$ export tututu= ; env | grep tututu
tututu=

ash-3.2$ arg2=something
bash-3.2$ $arg2
bash: something: command not found
bash-3.2$ export arg2
bash-3.2$ $arg2
bash: something: command not found
bash-3.2$ unset arg2
bash-3.2$ $arg2
bash-3.2$ unset arg2

bash-3.2$ ARG=NEW=42 ; echo $ARG
NEW=42
bash-3.2$ echo $NEW

$ARG ; echo $NEW
bash: NEW=42: command not found
bash-3.2$ export $ARG; echo $NEW
42

bash-3.2$ export §=hjk
bash: export: `§=hjk': not a valid identifier

bash-3.2$ <filenexistepas arg=89; echo $arg
bash: filenexistepas: No such file or directory
89

bash-3.2$ echo $ARG
ARG
bash-3.2$ export $"$ARG"=78
bash-3.2$ echo $ARG
78

bash-3.2$ echo -n -n -n -n tout
toutbash-3.2$ echo -nnnnnnn tout
toutbash-3.2$ 

bash-3.2$ exit 1567567 && touch kjhkjh && cat kjhkjh
exit
daniel_mercadiel@macbook minishell % echo $?
79

bash-3.2$ kjhkjh
bash: kjhkjh: command not found
bash-3.2$ exit $?
exit
daniel_mercadiel@macbook minishell % echo $?
127


fonction ps pour lister les tty
fonction tty pour savoir le tty courant
kill -9 <PID_ID> pour kill le tty "zombie" (au cas où)

(sleep 4 && echo premier fini >> file4) | (sleep 2 && echo deuxieme fini >>file4)
file =	deuxieme fini
		premier fini


bash-3.2$ sleep 10 && <<here cat
> lekjd
> ek
> here

lekjd
ek
bash-3.2$


HEREDOC SOUVRE DIRECTEment lors du parsing ast



bash-3.2$ <kjhkhjhkh cat | cat
bash: kjhkhjhkh: No such file or directory
bash-3.2$ 


bash-3.2$ cat | echo test
test
lkj
bash-3.2$ 

lsof | grep pidid

bash-3.2$ <file (ls)
bash: syntax error near unexpected token `('

bash-3.2$ echo <>
bash: syntax error near unexpected token `newline'
bash-3.2$ echo "<"
<
bash-3.2$ echo <"<"
bash: <: No such file or directory

bash-3.2$ echo >file5 test >file6 reussi
bash-3.2$ 
infile file5 : test reussi

msh-0.1> echo <file5 test >file6 reussi



bash-3.2$ echo oui && echo non || echo stop
oui
non
bash-3.2$ echo $poi && echo non || echo stop

non
bash-3.2$ jkljkj && echo non || echo stop
bash: jkljkj: command not found
stop
bash-3.2$ jkljkj && echo non && echo cool || echo stop
bash: jkljkj: command not found
stop
bash-3.2$ jkljkj && echo non && echo cool || echo stop && echo basta
bash: jkljkj: command not found
stop
basta
bash-3.2$ jkljkj && echo non && echo cool || lkjlj && echo basta
bash: jkljkj: command not found
bash: lkjlj: command not found
bash-3.2$ jkljkj && echo non && echo cool || lkjlj && echo basta || echo nothing
bash: jkljkj: command not found
bash: lkjlj: command not found
nothing
bash-3.2$ ls | grep nexistepas || echo non && echo basta
non
basta
bash-3.2$ (ls | grep nexistepas) || echo non && echo basta
non
basta
bash-3.2$ (ls | grep file) || echo non && echo basta
file_command
basta


mon ast est a chier, && et || doivent etre le meme token, on doit pouvoir parcourir la liste de cet ast jusqu'a la fin, en executant ou non selon si ||/&& et le dernier EXIT STATUS


ORDRE DU LEXER!!!! 
bash-3.2$ echo test | ARG=42 && echo $ARG

bash-3.2$ echo test | (ARG=42 && echo $ARG)
42
bash-3.2$ ARG=42 && echo VIVE | echo $ARG 
42
bash-3.2$ unset ARG
bash-3.2$ (ARG=42 && echo VIVE) | echo $ARG 

bash-3.2$ echo test | echo | hkhjhk | echo && echo reussi
bash-3.2$ echo test | echo | hkhjhk | kjhkhkj && echo dommage

bash-3.2$ echo $"?ab"c
?abc
bash-3.2$ echo $'?ab'c
?abc
bash-3.2$ echo $?'?ab'c
0?abc

bash-3.2$ file=newfile >$file 
fichier newfile existe
bash-3.2$ >$file2 file2=newfile2
fichier newfile2 existe aussi

bash-3.2$ echo $?
0
bash-3.2$ echo $"?"
?
bash-3.2$ echo $'?'
?

bash-3.2$ arg=ok
bash-3.2$ ok=deux
bash-3.2$ echo $"$arg"
ok
bash-3.2$ echo "$"$arg""
$ok